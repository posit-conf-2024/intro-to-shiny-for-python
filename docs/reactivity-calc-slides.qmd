---
title: "Reactive calculations"
title-slide-attributes: 
  data-background-image:  images/shiny-for-python.jpg
  data-background-position: bottom left
  data-background-size: cover
format:
  positconfslides-revealjs: 
    css: "styles.css"
    filters:
      - positconfslides
      - reveal-auto-agenda
    auto-agenda:
      heading: Agenda
---

```{python}
# | echo: false
import os
import sys
exercises_path = "./exercises"
if exercises_path not in sys.path:
    sys.path.append(exercises_path)
from helpers import include_shiny_folder, multiple_choice_app, Quiz
```


# Reactive calculations

## Reactivity scales

- Every Shiny app uses this pattern
- Works for dynamic UIs
- Shiny is lazy 

## Saving and reusing calculated values

- So far we've been working with shallow reactive graphs
- Each input is passed to a rendering function which produces an output
- Input -> Recipe -> Output can produce repetitive, inefficient applications
- `@reactive.calc` creates calculations whose results can be used by one _or more_ outputs
- This adds intermediate nodes to the reactive graph

## Reactive Calc example

{{< yourview '200-simple-reactive-calc' >}}


## Identify repetition
```{.python code-line-numbers="4,5,11,12"}
    @output
    @render.table
    def df():
        rand = np.random.rand(input.n_rows(), 1)
        df = pd.DataFrame(rand, columns=["col_1"])
        return df

    @output
    @render.plot
    def hist():
        rand = np.random.rand(input.n_rows(), 1)
        df = pd.DataFrame(rand, columns=["col_1"])
        plot = (
            ggplot(df, aes(x="col_1"))
            + geom_histogram(binwidth=0.1, fill="blue", color="black")
            + labs(x="Random Values", y="Frequency", title="Histogram of Random Data")
        )
        return plot
```

## Problems with repetition

1) Code is in multiple places
2) The app is taking the sample twice
3) The table and graph are not using the same sample!

## Reactive Calculation to the rescue
```{.python code-line-numbers="1-4,9,15"}
    @reactive.calc
    def sampled_df():
        rand = np.random.rand(input.n_rows(), 1)
        df = pd.DataFrame(rand, columns=["col_1"])

    @output
    @render.table
    def df():
        return sampled_df()

    @output
    @render.plot
    def hist():
        plot = (
            ggplot(sampled_df(), aes(x="col_1"))
            + geom_histogram(binwidth=0.1, fill="blue", color="black")
            + labs(x="Random Values", y="Frequency", title="Histogram of Random Data")
        )
        return plot
```

## Reactive calculations
- Defined with the `@reactive.calc` decorator
- Called like other inputs
- Can read inputs, reactive values, or other reactive calculations
- Caches its value, so it's cheap to call repeatedly
- Adds a node to the reactive graph
  - Discards cached value when upstream nodes invalidate
  - Notifies downstream nodes when it invalidates

## Initial state
```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]
  S --> T[Table]
  S --> P[Plot]
  
  classDef changed fill:#f96
  linkStyle 0 display:none
  linkStyle 1 display:none
  linkStyle 2 display:none
```

## Calculate table
```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]
  S --> T[Table]:::changed
  S --> P[Plot]
  
  classDef changed fill:#f96
  linkStyle 0 display:none
  linkStyle 1 display:none
  linkStyle 2 display:none
```

## Calculate table
```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]
  S --> T[Table]:::changed
  S --> P[Plot]
  
  classDef changed fill:#f96
  linkStyle 0 display:none
  linkStyle 2 display:none
```

## Calculate sample
```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]:::changed
  S --> T[Table]:::changed
  S --> P[Plot]
  
  classDef changed fill:#f96
  linkStyle 0 display:none
  linkStyle 2 display:none
```

## Calculate sample
```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]:::changed
  S --> T[Table]:::changed
  S --> P[Plot]
  
  classDef changed fill:#f96
  linkStyle 2 display:none
```

## Calculate plot
```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]
  S --> T[Table]
  S --> P[Plot]:::changed
  
  classDef changed fill:#f96
  linkStyle 2 display:none
```

## Calculate plot
```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]
  S --> T[Table]
  S --> P[Plot]:::changed
  
  classDef changed fill:#f96
```

## Deep reactive graph
```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]
  S --> T[Table]
  S --> P[Plot]
  
  classDef changed fill:#f96
```

## Slider changes

```{mermaid}
flowchart TD
  Sl[Slider]:::changed --> S[Sample]
  S --> T[Table]
  S --> P[Plot]
  
  classDef changed fill:#f96
```

## Invalidated
```{mermaid}
flowchart TD
  Sl[Slider]:::changed --> S[Sample]:::changed
  S --> T[Table]
  S --> P[Plot]
  
  classDef changed fill:#f96
  linkStyle 0 display:none
```

## Invalidated
```{mermaid}
flowchart TD
  Sl[Slider]:::changed --> S[Sample]:::changed
  S --> T[Table]:::changed
  S --> P[Plot]:::changed
  
  classDef changed fill:#f96
  linkStyle 0 display:none
  linkStyle 1 display:none
  linkStyle 2 display:none
```

## Recalculate table
```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]
  S --> T[Table]:::changed
  S --> P[Plot]
  
  classDef changed fill:#f96
  linkStyle 0 display:none
  linkStyle 1 display:none
  linkStyle 2 display:none
```

## Recalculate table
```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]
  S --> T[Table]:::changed
  S --> P[Plot]
  
  classDef changed fill:#f96
  linkStyle 0 display:none
  linkStyle 2 display:none
```

## Recalculate sample
```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]:::changed
  S --> T[Table]:::changed
  S --> P[Plot]
  
  classDef changed fill:#f96
  linkStyle 0 display:none
  linkStyle 2 display:none
```

## Recalculate sample
```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]:::changed
  S --> T[Table]:::changed
  S --> P[Plot]
  
  classDef changed fill:#f96
  linkStyle 2 display:none
```

## Recalculate plot
```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]
  S --> T[Table]
  S --> P[Plot]:::changed
  
  classDef changed fill:#f96
  linkStyle 2 display:none
```

## Recalculate plot
```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]
  S --> T[Table]
  S --> P[Plot]:::changed
  
  classDef changed fill:#f96
```

## Updated
```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]
  S --> T[Table]
  S --> P[Plot]
  classDef changed fill:#f96
```

# Your turn

## Your turn

{{< yourturn '209-reactive-effect' >}}


## Exercise 2.3 answer 

```{mermaid}
flowchart TD
  Sl[Slider] --> S[Sample]
  S[Sample] --> F[Filter]
  F --> T((Table))
  S --> P((Plot))
  F --> Tx((Text))
  classDef changed fill:#f96
```

# Overriding reactivity

## Overriding reactivity

- By default, when an input changes, any outputs that use it will recalculate
- This isn't always the user interaction you want
    - Database queries
    - Expensive modeling
    - Grouping multiple filters together
    - Side effects
- Use `reactive.event` to explicitly specify what should trigger recalculation for an output or calc

## Example

{{< yourview '202-reactive-event' >}}


## reactive.event

```{.python}
from shiny.express import ui, render, input
from shiny import reactive

ui.input_text("input_txt", "Enter text")
ui.input_action_button("send", "Enter")
@render.text
@reactive.event(input.send)
def output_txt():
    return input.input_txt()



```

- `@reactive.event` overrides the usual _implicit_ dependency detection with an _explicit_ trigger
- It can be applied to rendering functions or to `@reactive.calc`
- It tells Shiny to invalidate the object whenever or more inputs change
- `@reactive.event` is often used with action buttons or action links

## Your turn

{{< yourturn '208-reactive-event' 'true' >}}


# Side effects

## What we've learned

- How Shiny re-renders elements 
- How Shiny detects dependencies between elements (inputs and outputs)
- How to create reusable calculations with `@reactive.calc`
- How to explicitly control reactivity with `@reactive.event`

## Is that enough?

- Shiny has a function `ui.show_modal` which triggers a modal window. 
- Using what you know so far, how would you call this function?

{{< yourview '201-modal' >}}



## Return values vs. side effects

- Inputs, outputs, and calculations all produce values
- When an input value changes, downstream calculations and outputs might need to have their values updated as well
- But sometimes we want to execute some code that doesn't produce a value
  - Doesn't fit in the categories of "calculation" or "output"

## Reactive Effects

- The `@reactive.effect` decorator allows you to react to an input without returning a value
- Usually paired with `@reactive.event` 

``` {.python}
@reactive.effect
@reactive.event(input.show)
def toggle_modal():
    m = ui.modal(
        "This is a somewhat important message.",
        title="Click outside the modal to close",
        easy_close=True,
        footer=None,
    )
    ui.modal_show(m)
```

## The rule

* Code that produces an output: `@output` + `@render.*`
* Code that produces an intermediate value: `@reactive.calc`
* **Code that produces only side effects: `@reactive.effect`**

. . .

::: nonincremental
* Code that produces a value _and_ a side effect: _Don't do this!_
  * The "command-query separation" principle
:::

## What's a side effect?
```{python}
#| echo: false
#| output: asis
#| eval: false

questions = Quiz(
    {
        "Writing a CSV": {
            "choices": ["value", "side effect"],
            "answer": "side effect",
        },
        "Querying a database": {
            "choices": ["value", "side effect"],
            "answer": "value",
        },
        "Adding two numbers": {
            "choices": ["value", "side effect"],
            "answer": "value",
        },
        "A function which prints to the console": {
            "choices": ["value", "side effect"],
            "answer": "side effect",
        },
        "Fetching the current temperature from an API": {
            "choices": ["value", "side effect"],
            "answer": "value",
        },
        "A function which sorts a list in place": {
            "choices": ["value", "side effect"],
            "answer": "side effect",
        },
        "Getting a model score for a set of inputs": {
            "choices": ["value", "side effect"],
            "answer": "value",
        },
        "Deploying a model to a hosting service": {
            "choices": ["value", "side effect"],
            "answer": "side effect",
        },
    }
)
multiple_choice_app(questions)
```

## What's a side effect?

- Somewhat context dependent
- Multiple strategies can work
- If your solution feels complicated and painful, ask whether you should use the other strategy

## Your turn

{{< yourturn '201-reactive-calc' >}}

