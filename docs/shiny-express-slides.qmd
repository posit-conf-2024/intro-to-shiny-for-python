---
title: "Getting started with Shiny Express"
title-slide-attributes: 
  data-background-image:  images/shiny-for-python.jpg
  data-background-position: bottom left
  data-background-size: cover
format:
  positconfslides-revealjs:
    css: "styles.css"
    filters:
      - positconfslides
      - reveal-auto-agenda
    auto-agenda:
      heading: Agenda
---

```{python}
# | echo: false
import os
import sys
exercises_path = "./exercises"
if exercises_path not in sys.path:
    sys.path.append(exercises_path)

from helpers import include_shiny_folder

bgcolor = "whitesmoke"
```

# Introduction

## Intro

::: {.callout-note}

-   This workshop is exercise based
-   All of the exercises and slides are running live on this [website](https://posit-dev.github.io/intro-to-shiny-for-python/)
-   The exercise files are available for download from [github](https://github.com/posit-dev/intro-to-shiny-for-python/tree/main/docs/exercises)

:::

## Today's goal

Learn how to build reactive web apps with Shiny for Python,\
from the simple to the mission critical.


## Who you are {background-color=`{python} bgcolor`}
- Name
- What you do
- Have you used:
    + Python?
    + Shiny (for R or Python)?
    + HTML, CSS, JavaScript?


## Goals for this section

1.  Understand the "whole game"/ big picture

2.  Identify the resources that will support you

3.  Develop comfort with debugging

# Anatomy of an App

## What is a Shiny app? {background-color=`{python} bgcolor`}

:::: {.columns}

::: {.column width="50%"}

1. Pair up
2. Run the app
3. Describe what you see
4. Note one point of interest
:::

::: {.column width="50%"}

1. [Model Scoring](https://gallery.shinyapps.io/template-model-scoring/) ([code](https://github.com/posit-dev/py-shiny-templates/tree/main/model-scoring))  
1. [Restaurant tips dashboard](https://gallery.shinyapps.io/template-dashboard-tips1/) ([code](https://github.com/posit-dev/py-shiny-templates/tree/main/dashboard-tips))  
1. [Database Explorer](https://shiny.posit.co/py/templates/database-explorer/) ([code](https://github.com/posit-dev/py-shiny-templates/tree/main/database-explorer))  
1. [Streaming Database updates](https://shiny.posit.co/py/templates/monitor-database/) ([code](https://github.com/posit-dev/py-shiny-templates/tree/main/monitor-database))  
1. [Location Distance Calculator](https://gallery.shinyapps.io/template-map-distance/) ([code](https://github.com/posit-dev/py-shiny-templates/tree/main/map-distance))  
1. [Survey form](https://shiny.posit.co/py/templates/survey/) ([code](https://github.com/posit-dev/py-shiny-templates/tree/main/survey))  
1. [Shiny Wordle](https://shinylive.io/py/app/#wordle) ([code](https://shinylive.io/py/editor/#wordle))  

:::

::::


## What is a Shiny app?

Each Shiny app involves:

1. A web page
2. A computer that watches the web page and responds to user events on that page  

![](images/app-architecture.001.png){fig-align="center"}

## What is a Shiny app?

Each Shiny app involves:

1. A web page
2. A computer that watches the web page and responds to user events on that page    

![](images/app-architecture.002.png){fig-align="center"}

## What is a Shiny app?

Each Shiny app involves:

1. A web page
2. A computer that watches the web page and responds to user events on that page    

![](images/app-architecture.003.png){fig-align="center"}

## Components 

:::: {.columns}

::: {.column width="40%"}
Each Shiny app consists of:

1. Inputs
:::

::: {.column width="60%"}

![](images/app-components.001.png)
:::

::::

## Components 

:::: {.columns}

::: {.column width="40%"}
Each Shiny app consists of:

1. Inputs
2. Outputs
:::

::: {.column width="60%"}

![](images/app-components.002.png)
:::

::::

## Components 

:::: {.columns}

::: {.column width="40%"}
Each Shiny app consists of:

1. Inputs
2. Outputs
3. Instructions on how to build outputs from inputs
:::

::: {.column width="60%"}

![](images/app-components.003.png)
:::

::::

## Reactivity 

:::: {.columns}

::: {.column width="40%"}
When an input changes, Shiny reacts by rebuilding the outputs that depend on it, and _only those outputs_.
:::

::: {.column width="60%"}

![](images/app-components.003.png)
:::

::::

## Spreadsheet Analogy

![](images/spreadsheets.gif){height=300 fig-align="center"}

1. Inputs
2. Outputs
3. Instructions on how to build outputs from inputs

## Spreadsheet Analogy

![](images/spreadsheets-2.gif){height=300 fig-align="center"}

Updates:

1. When an input changes
2. Only the parts of the app that depend on the input

## Key features of reactivity

-   Easy enough to use for prototypes
-   Efficient enough to handle complexity
-   Scales to build production quality apps

## Why Shiny for Python?

Shiny lets you quickly create reactive web apps without worrying about:

- cache
- state
- callbacks  
- ...or even HTML, CSS, and JavaScript

And, these apps can scale from prototype to production-ready.

## Quiz - Where are the inputs? The Outputs?{background-color=`{python} bgcolor`}

![](images/app-components.004.png){height=650 fig-align="center"}

## Quiz - Where are the inputs? The Outputs?{background-color=`{python} bgcolor`}

![](images/app-components.005.png){height=650 fig-align="center"}

## Quiz - Where are the inputs? The Outputs?{background-color=`{python} bgcolor`}

![](images/app-components.006.png){height=650 fig-align="center"}

## Tell me about Shiny Express


::: {.callout-important}
Shiny for Python has two _syntaxes_ for writing the same apps:

1. Shiny Express - lightweight syntax informed by notebooks
1. Shiny Core - more verbose syntax similar to Shiny for R
:::

Today, we will learn Shiny Express.

# Your first App

## Your turn

{{< yourturn '101-run-app' >}}

## Run an App

Shiny for Python apps exist as ... Python files. 

To build an app from the file run at the command line:  

\    

```bash
shiny run app.py
```

\ 


where `app.py` is the name of your file.

## Today, we will do that in an exercise container.

![](images/exercise-button.png){height=650 fig-align="center"}

## But you can run `shiny run app.py` at any command line.

![](images/vscode-command-line.png){height=700 fig-align="center"}

## Or use the VS Code Shiny extension

This gives you a "Run App" button in VS Code.

![](images/vscode-button.png){height=600 fig-align="center"}


## The Important Accounts data

How well did we predict the Product Score for each sub-account?

\

::: {.smaller}
```{python}
#| output: asis
#| class-output: striped

import pandas as pd
from tabulate import tabulate

df = pd.read_csv("simulated-data.csv")
df = df.drop(columns=["text", "id"]).head(5)

print(tabulate(df, headers='keys', tablefmt='github', showindex=False))
```
:::

## Quiz {background-color=`{python} bgcolor`}

Let's build an app.  
  
Who remembers the three components of an app?

##

:::: {.columns}

::: {.column width="30%"}
![](images/app-components.001.png)

Inputs
:::

::: {.column width="30%"}
![](images/app-components.002.png)

Outputs
:::

::: {.column width="30%"}
![](images/app-components.003.png)

Instructions
:::

::::

## UI functions

-   The `ui` submodule contains functions to create UI elements
-   Functions like `ui.h1()` or `ui.markdown()` add static HTML to the app
-   We'll get to layout functions in Session 3

::: aside
<https://shiny.posit.co/py/api/express/express.ui.markdown.html>
:::

## Your turn

{{< yourturn '102-ui-module' >}}

# Inputs

## Inputs component gallery

![](images/input-component-gallery.png){height=700 fig-align="center"}

::: aside
<https://shiny.posit.co/py/components/>
:::

## Syntax Demo

{{< yourview '101-input' >}}

## Inputs

Notice:

- Inputs all begin with `ui.Input_`.
- Every input requires:
    1.  An id for the value to collect  
    1.  A label to display  
    1.  Input specific options

## How can you learn about input specific options?

The Shiny function reference 

![](images/shiny-function-reference.png){height=650 fig-align="center"}

::: aside
<https://shiny.posit.co/py/api/express/>
:::

## Your turn

{{< yourturn '103-inputs' >}}

## Quiz {background-color=`{python} bgcolor`}

What is the second thing a Shiny app needs?

# Outputs

## Outputs component gallery

![](images/output-component-gallery.png){height=700 fig-align="center"}

::: aside
<https://shiny.posit.co/py/components/>
:::

## Syntax Demo

{{< yourview '102-output' >}}

## Outputs

Notice:

- Outputs are created by a `@render.` decorator
- Pass the decorator a _set of instructions for building the output_ (in the form of a function that returns the contents of the output)

## What is a decorator? {background-color=`{python} bgcolor`}

Can any of our Python users explain?

## Decorators are just functions

::: {.callout-important}
A decorator is a function that wraps another function and changes its behavior. 
:::

\ 

Python has a convenient syntax for decorators. So these would do the same thing:  
\
```python
decorator(function, args)
```
\
```python
@decorator(args)
function
```

## Your turn

{{< yourturn '104-outputs' >}}

## Quiz {background-color=`{python} bgcolor`}

Where are the instructions on how to build the outputs in this app?

# Reactivity

## To make an app reactive...

## To make an app reactive...

Use an input value to build an output. 

## To make an app reactive...

Use an input value to build an output.  

\
To access an input's value, call `input.<id>()` where `<id>` is the string you passed to the input, e.g:
\
```python
ui.input_slider(
    id="n", 
    label="Choose n", 
    min=0, 
    max=100, 
    value=20
)
```
\
Value:
```python
input.n()
```

## Your turn

{{< yourturn '105-reactivity' >}}

## Reactive values are special

::: {.callout-important}
1. Only call reactive values from within a function that can handle them (e.g. a render function)
\  
2. Call them like a function: `input.n()`, not `input.n`

:::



## Which input will cause the app to update? {background-color=`{python} bgcolor`}

## What if...? {background-color=`{python} bgcolor`}

## The components of an app

Can we spot them in our sample code?

# What can go wrong?

## Common problems

-   An output doesn't render
-   An output doesn't update when an input changes
-   There's some weird error

## Common problems

-   ~~An output doesn't render~~
-   ~~An output doesn't update when an input changes~~
-   ~~There's some weird error~~
-   Syntax errors

## Your turn

{{< yourturn '106-debug' >}}


## Your turn

{{< yourturn '107-debug' >}}


## Your turn

{{< yourturn '108-debug' >}}

## Your turn

{{< yourturn '109-debug' >}}


# Recap

## Summary

Most Shiny app development consists of variations of these three things:

1.  Add **Inputs** and other UI elements
2.  Define **outputs** with render functions
3.  Give Shiny **instructions** on how to use inputs to build outputs

## Weather data

How accurate are forecasts?

```{python}
#| output: asis
#| class-output: striped

import pandas as pd
from tabulate import tabulate

df = pd.read_csv("weather.csv")
df = df.head(5)

print(tabulate(df, headers='keys', tablefmt='github', showindex=False))
```

## Your turn

{{< yourturn '110-app' >}}
